import sqlite3 as sql
import bcrypt
import os

database_name = "databaseFiles/database.db"
table_nameu = "user_table"
table_name = "diary_entry"
print("Database path:", os.path.abspath(database_name))

# Create a table if it doesn't exist yet
def initialize_db():
    global connection, cursor
    connection = sql.connect(database_name)
    cursor = connection.cursor()
    cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS {table_nameu} (
            username TEXT,
            password TEXT
        );
    """)
    cursor.execute(f"""
    CREATE TABLE IF NOT EXISTS {table_name} (
        Entry_ID INTEGER PRIMARY KEY AUTOINCREMENT,
        Developer TEXT,
        Project TEXT,
        Start_Time TEXT,
        End_Time TEXT,
        Time_Worked TEXT,
        Diary_Entry TEXT,
        Repo TEXT,
        Developer_Notes TEXT
    );
""")
    connection.commit()
    cursor.close()
    connection.close()

initialize_db()

def signup(username, password):
    connection = sql.connect(database_name)
    cursor = connection.cursor()
    query = f"INSERT INTO {table_nameu} (username, password) VALUES (?, ?)"
    cursor.execute(query, (username, password))
    connection.commit()
    cursor.close()
    connection.close()

def signin(username, password):
    connection = sql.connect(database_name)
    cursor = connection.cursor()
    query = f"SELECT * FROM {table_nameu} WHERE username = ? AND password = ?;"
    cursor.execute(query, (username, password))
    result = cursor.fetchone()
    cursor.close()
    connection.close()
    return result is not None


#Ability to input things into the table
def diary_entry(Developer, Project, Start_Time, End_Time, Diary_Entry, Time_Worked, Repo, Developer_Notes):
    query = f"""
        INSERT INTO {table_name} (Developer, Project, Start_Time, End_Time, Diary_Entry, Time_Worked, Repo, Developer_Notes) VALUES (?, ?, ?, ?, ?, ?, ?, ?);"""
    cursor.execute(query, (Developer, Project, Start_Time, End_Time, Diary_Entry, Time_Worked, Repo, Developer_Notes))
    connection.commit()
    last_id = cursor.lastrowid
    return last_id
